name: MicroPython Logic Capture Workflow

on:
  workflow_call:
    inputs:
      AWS_REGION:
        default: 'eu-west-1'
        required: false
        type: string
      LOGIC_CAPTURE_FILE:
        default: 'logic-capture.yml'
        required: false
        type: string
      ARTIFACT_NAME:
        required: true
        type: string
    secrets:
      AWS_ACCOUNT_ID:
        description: 'AWS account'
        required: true

permissions:

  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  deploy-and-capture:
    runs-on: ubuntu-latest
    timeout-minutes: 4
    steps:
      - uses: actions/checkout@v5
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-action-worker"
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Start step function
        env:
          CAPTURE_CONFIG_FILE: ${{ inputs.LOGIC_CAPTURE_FILE }}
        run: |
          BASE_64_ENCODED_CAPTURE_CONFIG_FILE=$( printf '%s' "$CAPTURE_CONFIG_FILE" | base64 )
          echo $BASE_64_ENCODED_CAPTURE_CONFIG_FILE
          INPUT_JSON='{ "githubToken": "${{ secrets.GITHUB_TOKEN }}", "repoGitUrl": "${{ github.repositoryUrl }}", "captureConfigFile": "'"$BASE_64_ENCODED_CAPTURE_CONFIG_FILE"'" }'
          EXECUTION_ARN=$( aws stepfunctions start-execution --state-machine-arn "arn:aws:states:${{ inputs.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:pico-logic-capture" --input "$(echo $INPUT_JSON | jq -R . )" --output text --query 'executionArn' )
          
          while [ $( aws stepfunctions describe-execution --execution-arn $EXECUTION_ARN --output text --query 'status' ) = 'RUNNING' ];
          do
              echo "...waiting"
              sleep 5s
          done
          
          FINAL_STATUS=$( aws stepfunctions describe-execution --execution-arn $EXECUTION_ARN --output text --query 'status' )
          echo "Final status: $FINAL_STATUS"
          if [[ $FINAL_STATUS != 'SUCCEEDED' ]] ; then
            echo "Game over!"
            aws stepfunctions describe-execution --execution-arn $EXECUTION_ARN --output text --query 'error'
            aws stepfunctions describe-execution --execution-arn $EXECUTION_ARN --output text --query 'cause'
            exit 1

          else
            aws stepfunctions describe-execution --execution-arn $EXECUTION_ARN --output text --query 'output' > execution-output.json
          
            jq -r .capturedData execution-output.json > captured-data.csv
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ARTIFACT_NAME }}
          path: captured-data.csv

